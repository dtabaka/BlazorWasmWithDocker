@using Models;
@using Services.Interfaces;
@inject IDataService DataService;
@using BlazorWasmWithDocker.Shared;

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {

    //This also works..
    //[Inject]
    //private IDataService DataService { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string _searchTerm = string.Empty;
    private string _accessToken = string.Empty;
    private Tomato[]? _tomatoes;

    protected override async Task OnInitializedAsync()
    {
        var tomatoes = await DataService.GetTomatoesAsync();
        Tomatoes = tomatoes.ToArray();
    }

    public string SearchTerm
    {
        get
        {
            return _searchTerm;
        }
        set
        {
            _searchTerm = value;
            NotifyStateChanged(this, Enums.StateProperty.SearchTerm);
        }
    }

    public string AccessToken
    {
        get
        {
            return _accessToken;
        }
        set
        {
            _accessToken = value;
            StateHasChanged();
        }
    }

    public Tomato[] Tomatoes
    {
        get
        {
            return _tomatoes;
        }
        set
        {
            _tomatoes = value;
            NotifyStateChanged(this, Enums.StateProperty.Tomatoes);
        }
    }

    //Event handler to pass component and property that has changed!
    //public event Action<ComponentBase, string> StateChanged;
    public event Action<ComponentBase, Enums.StateProperty> StateChanged;

    //This is called above when property is updated!
    private void NotifyStateChanged(ComponentBase Source, Enums.StateProperty Property) => StateChanged?.Invoke(Source, Property);
}