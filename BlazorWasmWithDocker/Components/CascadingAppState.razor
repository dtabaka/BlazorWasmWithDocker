@using Models;
@inject HttpClient httpClient;

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private string _searchTerm = string.Empty;
    private string _accessToken = string.Empty;
    private Tomato[]? _tomatoes;

    protected override async Task OnInitializedAsync()
    {
        // Perform asynchronous initialization tasks here
        _tomatoes = await httpClient.GetFromJsonAsync<Tomato[]>("https://firestore-gateway-details-1bkt07r7.uc.gateway.dev/tomato-list");
        Tomatoes = _tomatoes;

    }

    public string SearchTerm
    {
        get
        {
            return _searchTerm;
        }
        set
        {
            _searchTerm = value;
            StateHasChanged();
        }
    }

    public string AccessToken
    {
        get
        {
            return _accessToken;
        }
        set
        {
            _accessToken = value;
            StateHasChanged();
        }
    }

    public Tomato[] Tomatoes
    {
        get
        {
            return _tomatoes;
        }
        set
        {
            _tomatoes = value;
           NotifyStateChanged(this, "Tomatoes");
           /*StateHasChanged()*/
        }
    }

    //Event handler to pass component and property that has changed!
    public event Action<ComponentBase, string> StateChanged;

    //This is called above when property is updated!
    private void NotifyStateChanged(ComponentBase Source, string Property) => StateChanged?.Invoke(Source, Property);

}


