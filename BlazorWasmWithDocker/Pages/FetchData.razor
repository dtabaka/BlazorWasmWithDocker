@page "/fetchdata"
@*@attribute [Authorize]*@
@using System.Security.Claims
@using System.Net.Http.Headers;
@using Models;
@inject HttpClient httpClient;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@*@inject AuthenticationState authenticationState*@
@*@inject CascadingAuthenticationState CascadingAuthenticationState*@
@inject AppStateService AppStateService

@using AntDesign
@using AntDesign.TableModels

<PageTitle>Authenticate Demo</PageTitle>

<h1>Authenticate to Azure AD & Call Secure API</h1> 

<p>This component demonstrates authenticating against Azure AD in order to access secure content.</p>

<AuthorizeView>
    <Authorized Context="Auth">
        <h3>Hello, @Auth.User.Identity.Name !</h3>
     
        <Button type="primary" @onclick="BeginLogout">Log out</Button>

         @if (companies == null)
            {
                <p><em>Loading Cards...</em></p>
            }
            else
            {
                <h3>Cards</h3>
                <div style="background:#ECECEC; padding:20px; display:flex; flex-direction:row;">
                    @foreach (var company in companies)
                    {
                        <Card Bordered="true" Title=@company.Name  style="width: 300px; margin:10px;">
                            <TitleTemplate>
                            <Icon Type="info-circle" Theme="fill" /> Title is Template
                            </TitleTemplate>
                            <Body>
                                <p>@company.SubSector</p>
                            </Body>
                        </Card>
                    }
                </div>
            }
        

        <table class="table">
            @if (companies == null)
            {
                <p><em>Loading Table...</em></p>
            }
            else
            {
                <tbody>
                    <h3>DataTable</h3>
                    <Table 
                        TItem="Company"
                        DataSource="@companies">
                        <PropertyColumn Property="c=>c.Name" Sortable />
                        <PropertyColumn Property="c=>c.Symbol" Sortable />
                        <PropertyColumn Property="c=>c.Cik" Sortable />
                        <PropertyColumn Property="c=>c.SubSector" Sortable />
                    </Table>
                </tbody>
            }
        </table>
        <br />
        <div style="inline-size: 800px; overflow-wrap: break-word;">
            <p>Authorization Token: @accessToken</p>
        </div>

    </Authorized>
    <NotAuthorized>
        <a href="authentication/login?returnUrl=@Uri.EscapeDataString(Navigation.Uri)">
            <Button type="primary">Log in</Button>    
        </a>
    </NotAuthorized>
</AuthorizeView>


@code {

    private Company[]? companies;

    private string accessToken = "";

    protected override async Task OnInitializedAsync()
    {
        await CallSecureApi();
    }

    protected async Task CallSecureApi() {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await GetAuthorizationToken();
            accessToken = AppStateService.AccessToken;
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            companies = await httpClient.GetFromJsonAsync<Company[]>("https://firestore-apis---secured-by-azuread-api-gateway-1bkt07r7.uc.gateway.dev/firestoredata-cloud-run");
        }
    }

    protected async Task GetAuthorizationToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token2))
        {
            AppStateService.UpdateAccesToken(this, token2.Value);
        }
    }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected async Task GetAuthorizationToken2()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        claims = user.Claims;

        if (user.Identity.IsAuthenticated)
        {
            // Get the access token from the user's claims
            
            var accessTokenClaim = user.FindFirst("id_token");
            var accessTokenClaim2 = user.FindFirst("access_token");
            var preferredUserName = user.FindFirst("preferred_username");
            var accessToken = user.FindFirst("http://schemas.microsoft.com/identity/claims/access_token")?.Value;

            if (accessTokenClaim != null)
            {
                accessToken = accessTokenClaim.Value;
            }
        }
    }

  
    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

}
 
