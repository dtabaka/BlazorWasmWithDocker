@page "/fetchdata"
@*@attribute [Authorize]*@
@using System.Security.Claims
@using System.Net.Http.Headers;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@*@inject AuthenticationState authenticationState*@
@inject CascadingAuthenticationState CascadingAuthenticationState

@using AntDesign
@using AntDesign.TableModels

<PageTitle>Authenticate Demo</PageTitle>

<h1>Authenticate to Azure AD & Call Secure API</h1> 

<p>This component demonstrates authenticating against Azure AD in order to call a secure api.</p>

<AuthorizeView>
    <Authorized Context="Auth">
        <h3>Hello, @Auth.User.Identity.Name !</h3>

        <LoginDisplay></LoginDisplay>
       
        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>

         @if (companies == null)
            {
                <p><em>Loading Cards...</em></p>
            }
            else
            {

                <h3>Cards</h3>
                <div style="background:#ECECEC; padding:20px; display:flex; flex-direction:row;">
                    @foreach (var company in companies)
                    {
                        <Card Bordered="true" Title=@company.Name  style="width: 300px; margin:10px;">
                            <TitleTemplate>
                            <Icon Type="info-circle" Theme="fill" /> Title is Template
                            </TitleTemplate>
                            <Body>
                                <p>@company.SubSector</p>

                            </Body>
                        </Card>
                    }
                </div>
            }
        

        <table class="table">
            @if (companies == null)
            {
                <p><em>Loading Table...</em></p>
            }
            else
            {
                <tbody>
                            
                    <h3>DataTable</h3>

                    <Table 
                        TItem="Company"
                        DataSource="@companies">
                        <PropertyColumn Property="c=>c.Name" Sortable />
                        <PropertyColumn Property="c=>c.Symbol" Sortable />
                        <PropertyColumn Property="c=>c.Cik" Sortable />
                        <PropertyColumn Property="c=>c.SubSector" Sortable />
                    </Table>

                </tbody>
            }
        </table>
        <br />
        <div style="inline-size: 800px; overflow-wrap: break-word;">
            <p>Authorization Token: @accessToken</p>
        </div>

    </Authorized>
    <NotAuthorized>
        <a href="authentication/login?returnUrl=@Uri.EscapeDataString(Navigation.Uri)">Log in</a>
    </NotAuthorized>
</AuthorizeView>


@code {

    [CascadingParameter] public CascadingAppState cascadingAppState { get; set; }

    private Company[]? companies;
    
    private string accessToken = "";

    protected override async Task OnInitializedAsync()
    {
        await CallSecureApi();
        //await GetAuthorizationToken();
        //await GetAuthorizationToken2();
    }

    public class Company {
        public string Symbol { get; set; }
        public string Cik { get; set; }
        public string Name { get; set; }
        public string SubSector { get; set;  }
        public string Sector { get; set; }
        public string HeadQuarters { get; set; }
    } 

    protected async Task CallSecureApi() {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            //Works...UN-authenticated version...
            //companies = await Http.GetFromJsonAsync<Company[]>("https://cloud-run-service-gxnjs4mbgq-uc.a.run.app/firestoredata");

            await GetAuthorizationToken();

            accessToken = cascadingAppState.AccessToken;

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            //Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
            companies = await Http.GetFromJsonAsync<Company[]>("https://firestore-apis---secured-by-azuread-api-gateway-1bkt07r7.uc.gateway.dev/firestoredata-cloud-run");
        }
    }

    protected async Task GetAuthorizationToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken(
        //
        //new AccessTokenRequestOptions
        //{
        //        Scopes = new[] { "api://d488b2ac-94e8-48b6-b280-32f747ea28ce/SampleScope.Read" }
        //}
        );

        if (tokenResult.TryGetToken(out var token2))
        {
            //accessToken = token2.Value;
            cascadingAppState.AccessToken = token2.Value;
        }

    }


    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected async Task GetAuthorizationToken2()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        claims = user.Claims;

        if (user.Identity.IsAuthenticated)
        {
            // Get the access token from the user's claims
            
            var accessTokenClaim = user.FindFirst("id_token");
            var accessTokenClaim2 = user.FindFirst("access_token");
            var preferredUserName = user.FindFirst("preferred_username");
            var accessToken = user.FindFirst("http://schemas.microsoft.com/identity/claims/access_token")?.Value;

            if (accessTokenClaim != null)
            {
                accessToken = accessTokenClaim.Value;
            }
        }

        //var surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;

        //var user = authenticationState.User;
        //var accessTokenClaim = user.FindFirst("access_token");

        //if (accessTokenClaim != null)
        //{
        //    accessToken = accessTokenClaim.Value;
        //}
    }

  
    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

}
 
