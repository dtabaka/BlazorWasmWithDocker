@page "/catalog"
@using Models
@using AntDesign
@implements IDisposable
@inject AppStateService AppStateService
@inject IDataService DataService

<PageTitle>Catalog</PageTitle>

@if (_tomatoes == null)
{
    <div class="center-loading-indicator">
        <Spin size="large" />
    </div>
}
else
{
    <PageSubHeader>
        <h2>Catalog</h2>
        <CatalogSearch></CatalogSearch>
    </PageSubHeader>

    <div class="search-results">
        
        @if (_tomatoes == null)
        {
            <div class="center-loading-indicator">
                <Spin size="large" />
            </div>
        }
        else
        {
            if (_tomatoes.Length == 0) {
                <p>No results matching search criteria</p>
            } else {
                @foreach (var tomato in _tomatoes)
                {
                    <div @onclick="() => showDetails(tomato.DocumentId)" style="display:flex;">
                        <Card Bordered="true" Title=@tomato.Variety >
                            <TitleTemplate>
                                <Icon Type="info-circle" Theme="fill" /> @tomato.Variety
                            </TitleTemplate>
                            <Body>
                                <p>@tomato.Description</p>
                            </Body>
                        </Card>
                    </div>
                }
            }
        }
       
    </div>

    <CatalogDetail Visible=@visible @ref="catalogDetailRef" OnDetailClosed="ResetVisible"></CatalogDetail>

}

@code {

    private Tomato[]? _tomatoes;
    private CatalogDetail? catalogDetailRef;
    bool visible = false;

    [Parameter]
    public string SearchTerm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitData();

        AppStateService.StateChanged += StateChanged;
    }

    private async Task InitData() {

        if (AppStateService.Tomatoes == null)
        {
            var tomatoes = await DataService.GetTomatoesAsync();
            _tomatoes = tomatoes.ToArray();
            AppStateService.UpdateTomatoList(this, _tomatoes);
        }
        else
        {
            if (!String.IsNullOrWhiteSpace(AppStateService.SearchTerm))
            {
                _tomatoes = filterListBySearchTerm();
            }
            else
            {
                _tomatoes = AppStateService.Tomatoes;
            }
        }
    }

    private void StateChanged(object Source, Enums.StateProperty Property)
    {
        if (Source != this)
        {
            if (Property == Enums.StateProperty.Tomatoes)
            {
                _tomatoes = AppStateService.Tomatoes;
                StateHasChanged();
            }

            if (Property == Enums.StateProperty.SearchTerm)
            {
                _tomatoes = filterListBySearchTerm();
                StateHasChanged();
            }
        }
    }

    private Tomato[] filterListBySearchTerm() {

        //Single keyword search...
        //return AppStateService.Tomatoes.Where(t => t.Description.Contains(AppStateService.SearchTerm, StringComparison.OrdinalIgnoreCase)).ToArray();
       
        //Multiple keyword search...
        var searchTerms = AppStateService.SearchTerm.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        return AppStateService.Tomatoes
            .Where(tomato => searchTerms.Any(searchTerm => 
                tomato.Variety.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                tomato.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))).ToArray();
    }

    void IDisposable.Dispose() {
        AppStateService.StateChanged -= StateChanged;
    }

    void showDetails(string documentId)
    {
        this.visible = true;
        catalogDetailRef.Id = documentId;
    }

    private void ResetVisible()
    {
        this.visible = false;
    }
}
